.. include:: /Includes.rst.txt
.. _cb_definition:

==========
Definition
==========

The minimal viable definition consists of a folder with a YAML file named
**EditorInterface.yaml** inside. All other resources are split into two folders
named **Assets** and **Source**. These include public resources, translations
and templates.

.. code-block:: none
   :caption: Directory structure of a Content Block

   ├── Assets
   │   └── Icon.svg
   ├── Source
   │   ├── Language
   │   │   └── Labels.xlf
   │   ├── EditorPreview.html
   │   └── Frontend.html
   └── EditorInterface.yaml

EditorInterface.yaml
====================

The heart of a Content Block is the **EditorInterface.yaml** file. This YAML
file defines both the available fields and the structure:

.. code-block:: yaml
   :caption: EXT:some_extension/ContentBlocks/ContentElements/content-block-name

    name: vendor/content-block-name
    fields:
      - identifier: header
        useExistingField: true
      - identifier: my_text_field
        type: Text
        max: 10

First of all, a :yaml:`name` has to be defined. It must be unique inside your
installation. It consists, similarly to composer package names, of a vendor and
a package part separated by a slash. It is used to prefix new field names, new
tables and record type identifiers.

Inside :yaml:`fields` you define the structure and configuration of the
necessary fields. The :yaml:`identifier` has to be unique per Content Block.

It is possible to reuse existing fields with the flag :yaml:`useExistingField`.
This allows e.g. to use the same field :sql:`header` or :sql:`bodytext` across
multiple Content Blocks with different configuration. Be aware that system
fields shouldn't be reused. A list of sane reusable fields can be referenced in
the documentation. Furthermore, own custom fields can be reused as well.

*  Refer to the :ref:`YAML reference <yaml_reference>` for a complete overview.
*  Learn more about :ref:`reusing fields <cb_reuse_existing_fields>`
*  Learn how to :ref:`extend TCA <cb_extendTca>` of Content Blocks (for advanced users).
*  For more information about the YAML syntax refer to `YAML RFC <https://github.com/yaml/summit.yaml.io/wiki/YAML-RFC-Index>`__

Assets/Icon.(svg|png|gif)
-------------------------

This is the icon for the Content Block. There is a fallback to a default icon,
but it is recommended to replace it with your own, custom icon. You can find
many official TYPO3 icons `here <https://typo3.github.io/TYPO3.Icons/icons/content.html>`__.

**You should**

*  provide this file
*  provide that file in the format svg or png or gif
*  provide a file with 1:1 dimensions

Source/Language/Labels.xlf
--------------------------

**You may**

*  provide that file
*  define your labels with the XLF paths in the configuration file

Labels for the editing interface, as well as frontend labels, are stored in the
`Source/Language/Labels.xlf` (translated files will be e.g. `de.Labels.xlf`).

It is recommended to apply the :ref:`coding guidelines for the XLIFF Format <t3coreapi:xliff>`.

Labels and descriptions for the backend preview and the editing interface will
be automatically registered by a convention. See the following examples on how
this works:

.. code-block:: xml

    <?xml version="1.0"?>
    <xliff version="1.2" xmlns="urn:oasis:names:tc:xliff:document:1.2">
        <file datatype="plaintext" original="Labels.xlf" source-language="en" product-name="example">
            <header/>
            <body>
                <trans-unit id="title" resname="title">
                    <source>This is the backend title</source>
                </trans-unit>
                <trans-unit id="description" resname="description">
                    <source>This is the backend description</source>
                </trans-unit>
                <trans-unit id="FIELD_IDENTIFIER.label" resname="FIELD_IDENTIFIER.label">
                    <source>This is the backend label for FIELD_IDENTIFIER</source>
                </trans-unit>
                <trans-unit id="COLLECTION_IDENTIFIER.FIELD_IDENTIFIER.label" resname="COLLECTION_IDENTIFIER.FIELD_IDENTIFIER.label">
                    <source>This is the backend label for FIELD_IDENTIFIER in Collection COLLECTION_IDENTIFIER</source>
                </trans-unit>
            </body>
        </file>
    </xliff>

There are more conventions for special field types like
:ref:`Palettes <field_type_palette>` and :ref:`Tabs <field_type_tab>`. See the
respective documentation for more insights.

.. tip::

   The xlf content can be automatically generated by the
   :ref:`content-block:language:generate <command_language_generate>` command.
